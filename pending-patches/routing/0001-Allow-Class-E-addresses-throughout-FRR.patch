From fc3908d7af86acd11198936f23f96e5b990e3de9 Mon Sep 17 00:00:00 2001
From: Dave Taht <dave@taht.net>
Date: Sun, 9 Dec 2018 02:46:20 +0000
Subject: [PATCH] Allow Class E addresses throughout FRR

There is no reason to conflate the multicast and class e address
spaces within FRR.

---
 bgpd/bgp_attr.c        |  2 +-
 bgpd/bgp_packet.c      |  3 ++-
 bgpd/bgp_route.c       |  7 +++++--
 lib/prefix.h           |  6 ++++--
 lib/routemap.c         |  5 +++--
 pimd/mtracebis.c       |  3 ++-
 pimd/pim_igmp_mtrace.c | 13 +++++++------
 7 files changed, 24 insertions(+), 15 deletions(-)

diff --git a/bgpd/bgp_attr.c b/bgpd/bgp_attr.c
index 87ebb9c28..d2833ac2b 100644
--- a/bgpd/bgp_attr.c
+++ b/bgpd/bgp_attr.c
@@ -1286,7 +1286,7 @@ static bgp_attr_parse_ret_t bgp_attr_nexthop(struct bgp_attr_parser_args *args)
 	nexthop_n = stream_get_ipv4(peer->curr);
 	nexthop_h = ntohl(nexthop_n);
 	if ((IPV4_NET0(nexthop_h) || IPV4_NET127(nexthop_h)
-	     || IPV4_CLASS_DE(nexthop_h))
+	     || IPV4_CLASS_D(nexthop_h) || IPV4_BROADCAST(nexthop_h))
 	    && !BGP_DEBUG(
 		       allow_martians,
 		       ALLOW_MARTIANS)) /* loopbacks may be used in testing */
diff --git a/bgpd/bgp_packet.c b/bgpd/bgp_packet.c
index 73a07c823..a5b34c947 100644
--- a/bgpd/bgp_packet.c
+++ b/bgpd/bgp_packet.c
@@ -1149,7 +1149,8 @@ static int bgp_open_receive(struct peer *peer, bgp_size_t size)
 	}
 
 	/* remote router-id check. */
-	if (remote_id.s_addr == 0 || IPV4_CLASS_DE(ntohl(remote_id.s_addr))
+	if (remote_id.s_addr == 0 || IPV4_CLASS_D(ntohl(remote_id.s_addr))
+	    || IPV4_BROADCAST(remote_id.s_addr)
 	    || ntohl(peer->local_id.s_addr) == ntohl(remote_id.s_addr)) {
 		if (bgp_debug_neighbor_events(peer))
 			zlog_debug("%s bad OPEN, wrong router identifier %s",
diff --git a/bgpd/bgp_route.c b/bgpd/bgp_route.c
index 74e4276c0..612cd6e32 100644
--- a/bgpd/bgp_route.c
+++ b/bgpd/bgp_route.c
@@ -2864,7 +2864,8 @@ static int bgp_update_martian_nexthop(struct bgp *bgp, afi_t afi, safi_t safi,
 	/* If NEXT_HOP is present, validate it. */
 	if (attr->flag & ATTR_FLAG_BIT(BGP_ATTR_NEXT_HOP)) {
 		if (attr->nexthop.s_addr == 0
-		    || IPV4_CLASS_DE(ntohl(attr->nexthop.s_addr))
+		    || IPV4_CLASS_D(ntohl(attr->nexthop.s_addr))
+		    || IPV4_BROADCAST(attr->nexthop.s_addr)
 		    || bgp_nexthop_self(bgp, attr->nexthop))
 			return 1;
 	}
@@ -2879,7 +2880,9 @@ static int bgp_update_martian_nexthop(struct bgp *bgp, afi_t afi, safi_t safi,
 		case BGP_ATTR_NHLEN_IPV4:
 		case BGP_ATTR_NHLEN_VPNV4:
 			ret = (attr->mp_nexthop_global_in.s_addr == 0
-			       || IPV4_CLASS_DE(ntohl(
+			       || IPV4_BROADCAST(
+					  attr->mp_nexthop_global_in.s_addr)
+			       || IPV4_CLASS_D(ntohl(
 					  attr->mp_nexthop_global_in.s_addr))
 			       || bgp_nexthop_self(bgp,
 						   attr->mp_nexthop_global_in));
diff --git a/lib/prefix.h b/lib/prefix.h
index 424756913..ce19ee761 100644
--- a/lib/prefix.h
+++ b/lib/prefix.h
@@ -329,7 +329,8 @@ static inline void ipv4_addr_copy(struct in_addr *dst,
 #define IPV4_NET0(a) ((((uint32_t)(a)) & 0xff000000) == 0x00000000)
 #define IPV4_NET127(a) ((((uint32_t)(a)) & 0xff000000) == 0x7f000000)
 #define IPV4_LINKLOCAL(a) ((((uint32_t)(a)) & 0xffff0000) == 0xa9fe0000)
-#define IPV4_CLASS_DE(a) ((((uint32_t)(a)) & 0xe0000000) == 0xe0000000)
+#define IPV4_CLASS_D(a) ((((uint32_t)(a)) & 0xf0000000) == 0xe0000000)
+#define IPV4_BROADCAST(a) (((uint32_t)(a)) == 0xffffffff)
 #define IPV4_MC_LINKLOCAL(a) ((((uint32_t)(a)) & 0xffffff00) == 0xe0000000)
 
 /* Max bit/byte length of IPv6 address. */
@@ -465,7 +466,8 @@ static inline int ipv4_martian(struct in_addr *addr)
 {
 	in_addr_t ip = ntohl(addr->s_addr);
 
-	if (IPV4_NET0(ip) || IPV4_NET127(ip) || IPV4_CLASS_DE(ip)) {
+	if (IPV4_NET0(ip) || IPV4_NET127(ip) || IPV4_CLASS_D(ip)
+	    || IPV4_BROADCAST(ip)) {
 		return 1;
 	}
 	return 0;
diff --git a/lib/routemap.c b/lib/routemap.c
index 5c6d106d8..f235ddec9 100644
--- a/lib/routemap.c
+++ b/lib/routemap.c
@@ -2357,9 +2357,10 @@ DEFUN (set_ip_nexthop,
 		return CMD_WARNING_CONFIG_FAILED;
 	}
 	if (su.sin.sin_addr.s_addr == 0
-	    || IPV4_CLASS_DE(ntohl(su.sin.sin_addr.s_addr))) {
+	    || IPV4_BROADCAST(su.sin.sin_addr.s_addr)
+	    || IPV4_CLASS_D(ntohl(su.sin.sin_addr.s_addr))) {
 		vty_out(vty,
-			"%% nexthop address cannot be 0.0.0.0, multicast or reserved\n");
+			"%% nexthop address cannot be 0.0.0.0, or multicast\n");
 		return CMD_WARNING_CONFIG_FAILED;
 	}
 
diff --git a/pimd/mtracebis.c b/pimd/mtracebis.c
index 65c495eff..e2239ae40 100644
--- a/pimd/mtracebis.c
+++ b/pimd/mtracebis.c
@@ -456,7 +456,8 @@ int main(int argc, char *const argv[])
 	if (argc == 3) {
 		if (inet_pton(AF_INET, argv[2], &mc_group) != 1)
 			not_group = true;
-		if (!not_group && !IPV4_CLASS_DE(ntohl(mc_group.s_addr)))
+		if (!not_group && !(IPV4_CLASS_D(ntohl(mc_group.s_addr))
+					|| IPV4_BROADCAST(mc_group.s_addr)))
 			not_group = true;
 	}
 
diff --git a/pimd/pim_igmp_mtrace.c b/pimd/pim_igmp_mtrace.c
index 1fb624a6a..ce71557a8 100644
--- a/pimd/pim_igmp_mtrace.c
+++ b/pimd/pim_igmp_mtrace.c
@@ -322,7 +322,7 @@ static int mtrace_send_packet(struct interface *ifp,
 		goto close_fd;
 	}
 
-	if (IPV4_CLASS_DE(ntohl(dst_addr.s_addr))) {
+	if (IPV4_CLASS_D(ntohl(dst_addr.s_addr))) {
 		if (IPV4_MC_LINKLOCAL(ntohl(dst_addr.s_addr))) {
 			ttl = 1;
 		} else {
@@ -506,7 +506,7 @@ static int mtrace_mc_forward_packet(struct pim_instance *pim, struct ip *ip_hdr)
 
 static int mtrace_forward_packet(struct pim_instance *pim, struct ip *ip_hdr)
 {
-	if (IPV4_CLASS_DE(ntohl(ip_hdr->ip_dst.s_addr)))
+	if (IPV4_CLASS_D(ntohl(ip_hdr->ip_dst.s_addr)))
 		return mtrace_mc_forward_packet(pim, ip_hdr);
 	else
 		return mtrace_un_forward_packet(pim, ip_hdr, NULL);
@@ -568,7 +568,7 @@ static int mtrace_send_response(struct pim_instance *pim,
 	mtracep->checksum = 0;
 	mtracep->checksum = in_cksum((char *)mtracep, mtrace_len);
 
-	if (IPV4_CLASS_DE(ntohl(mtracep->rsp_addr.s_addr))) {
+	if (IPV4_CLASS_D(ntohl(mtracep->rsp_addr.s_addr))) {
 		struct pim_rpf *p_rpf;
 		char grp_str[INET_ADDRSTRLEN];
 
@@ -639,7 +639,8 @@ int igmp_mtrace_recv_qry_req(struct igmp_sock *igmp, struct ip *ip_hdr,
 	 * Check if mtrace packet is addressed elsewhere and forward,
 	 * if applicable
 	 */
-	if (!IPV4_CLASS_DE(ntohl(ip_hdr->ip_dst.s_addr)))
+	if (!(IPV4_CLASS_D(ntohl(ip_hdr->ip_dst.s_addr))
+		|| IPV4_BROADCAST(ip_hdr->ip_dst.s_addr)))
 		if (!if_lookup_exact_address(&ip_hdr->ip_dst, AF_INET,
 					     pim->vrf_id))
 			return mtrace_forward_packet(pim, ip_hdr);
@@ -687,7 +688,7 @@ int igmp_mtrace_recv_qry_req(struct igmp_sock *igmp, struct ip *ip_hdr,
 
 		/* 6.1.1  Packet verification */
 		if (!pim_if_connected_to_source(ifp, mtracep->dst_addr)) {
-			if (IPV4_CLASS_DE(ntohl(ip_hdr->ip_dst.s_addr))) {
+			if (IPV4_CLASS_D(ntohl(ip_hdr->ip_dst.s_addr))) {
 				if (PIM_DEBUG_MTRACE)
 					zlog_debug(
 						"Dropping multicast query "
@@ -730,7 +731,7 @@ int igmp_mtrace_recv_qry_req(struct igmp_sock *igmp, struct ip *ip_hdr,
 	}
 
 	/* 6.2.1 Packet Verification - drop not link-local multicast */
-	if (IPV4_CLASS_DE(ntohl(ip_hdr->ip_dst.s_addr))
+	if (IPV4_CLASS_D(ntohl(ip_hdr->ip_dst.s_addr))
 	    && !IPV4_MC_LINKLOCAL(ntohl(ip_hdr->ip_dst.s_addr))) {
 		if (PIM_DEBUG_MTRACE)
 			zlog_warn(
-- 
2.17.1

